/******************************************************************************
 * This file was generated by langium-cli 3.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const SmtLibTerminals = {
    SPEC_CONSTANT: /(((((0|[1-9][0-9]*)|(((0|[1-9][0-9]*)\.(0|[1-9][0-9]*))))|('))|('))|("([\x20-\x7E\s\t\r\n]|"")+"))/,
    WHITE_SPACE_CHAR: /[\s\t\r\n]+/,
    SYMBOL: /((?<![0-9])[a-zA-Z0-9~!@$%^&*_\-+=<>.?\/]+)/,
    KEYWORD: /(:((?<![0-9])[a-zA-Z0-9~!@$%^&*_\-+=<>.?\/]+))/,
};

export interface Model extends AstNode {
    readonly $type: 'Model';
    expressions: S_EXPR;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface S_EXPR extends AstNode {
    readonly $container: Model | S_EXPR;
    readonly $type: 'S_EXPR';
    keywords: Array<string>;
    s_exps: Array<S_EXPR>;
    spec_constants: Array<string>;
    symbols: Array<string>;
}

export const S_EXPR = 'S_EXPR';

export function isS_EXPR(item: unknown): item is S_EXPR {
    return reflection.isInstance(item, S_EXPR);
}

export type SmtLibAstType = {
    Model: Model
    S_EXPR: S_EXPR
}

export class SmtLibAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [Model, S_EXPR];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'expressions' }
                    ]
                };
            }
            case S_EXPR: {
                return {
                    name: S_EXPR,
                    properties: [
                        { name: 'keywords', defaultValue: [] },
                        { name: 's_exps', defaultValue: [] },
                        { name: 'spec_constants', defaultValue: [] },
                        { name: 'symbols', defaultValue: [] }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new SmtLibAstReflection();
